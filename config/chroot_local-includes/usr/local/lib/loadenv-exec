#!/bin/bash

# This script exports environment variables from the file specified in
# the ENVFILE argument and then executes the specified command.
#
# If any environment variables from ENVFILE are already set in the
# current environment, those are *not* overwritten, so environment
# variables set by the caller take precedence over the ones from ENVFILE.
#
# ENVFILE must be null-terminated.

set -euo pipefail

if [ $# -lt 2 ]; then
  echo >&2 "Usage: $0 ENVFILE [--] COMMAND [ARG...]"
  exit 1
fi

ENVFILE="$1"
shift

if [ "$1" = "--" ]; then
  shift
fi

while IFS= read -r -d $'\0' line; do
  # Extract the variable name by removing the longest suffix which
  # matches "=*". For documentation on this bash feature see [1].
  var="${line%%=*}"
  # Only export the variable if it's unset in the current environment.
  # This uses bash's variable indirection, see [2].
  if [ -z "${!var-}" ]; then
    export "${line?}"
  fi
done <"${ENVFILE}"

exec "$@"

# References:
# [1]: Search for "${parameter%%word}" in https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
# [2]: Search for "indirection" in https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
