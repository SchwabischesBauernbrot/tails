#!/usr/bin/env python3

"""User interface to configure Tails Additional Software."""

import gettext
import os
import subprocess
import sys
import threading
import time

import apt.cache
import gi
from gi.repository import Gio  # NOQA: E402

gi.require_version("Gtk", "4.0")
from gi.repository import Gtk                               # NOQA: E402

from tailslib.persistence import (                          # NOQA: E402
    additional_software_persistence_feature_is_active,
    has_unlocked_persistence,
    has_persistence,
    is_tails_media_writable)

from additional_software import (                   # NOQA: E402
    get_additional_packages,
    get_packages_list_path,
    filter_package_details)


gettext.install("tails")
_ = gettext.gettext


UI_FILE = "/usr/share/tails/additional-software/configuration-window.ui"


@Gtk.Template.from_file(UI_FILE)
class Window(Gtk.ApplicationWindow):
    __gtype_name__ = "Window"

    listbox = Gtk.Template.Child()
    no_package_page = Gtk.Template.Child()
    package_list_page = Gtk.Template.Child()
    stack = Gtk.Template.Child()
    install_label = Gtk.Template.Child()
    persistence_button = Gtk.Template.Child()
    headerbar = Gtk.Template.Child()
    main_box = Gtk.Template.Child()

    def __init__(self, application, get_config_func, remove_asp_func):
        Gtk.ApplicationWindow.__init__(self, application=application)

        self.get_config_func = get_config_func
        self.remove_asp_func = remove_asp_func

        self.listbox.set_header_func(self._listbox_update_header_func, None)

    @staticmethod
    def _listbox_update_header_func(row, before, user_data):
        if not before:
            row.set_header(None)
            return

        current = row.get_header()
        if not current:
            current = Gtk.Separator.new(Gtk.Orientation.HORIZONTAL)
            current.show()
            row.set_header(current)

    def __show_exception_dialog(self, explanation, exception):
        dialog = Gtk.MessageDialog(
            self,
            Gtk.DialogFlags.DESTROY_WITH_PARENT,
            Gtk.MessageType.ERROR,
            Gtk.ButtonsType.OK,
            explanation)
        dialog.format_secondary_text(str(exception))
        dialog.run()
        dialog.destroy()

    @Gtk.Template.Callback()
    def cb_activate_link(self, label, uri):
        if uri.endswith(".desktop"):
            appinfo = Gio.DesktopAppInfo.new(uri)
            appinfo.launch()
            return True

    def cb_listboxrow_remove_button_clicked(self, button, package_name):
        dialog = Gtk.MessageDialog(
            transient_for=self,
            message_type=Gtk.MessageType.QUESTION,
            # Translators: Don't translate {package}, it's a placeholder and will be replaced.
            text=_("Remove {package} from your additional software? "
                             "This will stop installing the package "
                             "automatically.").format(package=package_name),
            use_markup=True,
            modal=True,
        )
        dialog.add_button("Cancel", Gtk.ResponseType.REJECT)
        dialog.add_button("Remove", Gtk.ResponseType.ACCEPT)

        def cb_dialog_response(dialog, response_id):
            if response_id == Gtk.ResponseType.ACCEPT:
                try:
                    self.remove_asp_func(package_name)
                except subprocess.CalledProcessError as e:
                    self.__show_exception_dialog(
                        # Translators: Don't translate {pkg}, it's a placeholder and will be replaced.
                        _("Failed to remove {pkg}").format(pkg=package_name),
                        e)
            dialog.destroy()

        dialog.connect("response", cb_dialog_response)
        dialog.present()

    @Gtk.Template.Callback()
    def cb_persistence_button_clicked(self, button, data=None):
        subprocess.check_call(["/usr/bin/gtk-launch", "org.boum.tails.PersistentStorage.desktop"])

    def _wait_for_persistence_ready(self):
        print("Waiting for Persistent Storage to be ready")
        while not additional_software_persistence_feature_is_active():
            time.sleep(2)
        print("Persistent Storage is ready")
        self.update_packages_list()

    @Gtk.Template.Callback()
    def cb_window_show(self, window):
        self.update_packages_list()

    def update_packages_list(self):
        try:
            packages = self.get_config_func()
        except Exception as e:
            self.__show_exception_dialog(
                _("Failed to read additional software configuration"),
                e)
            self.hide()
            return
        self.persistence_button.set_visible(False)
        if packages:
            widget = self.listbox.get_row_at_index(0)
            while widget:
                widget.destroy()
                widget = self.listbox.get_row_at_index(0)

            for package_name, package_description in packages:
                listboxrow = Gtk.ListBoxRow.new()

                hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 0)
                # hbox.set_border_width(3)

                vbox = Gtk.Box.new(Gtk.Orientation.VERTICAL, 0)
                name_label = Gtk.Label.new(f"<b>{package_name}</b>")
                name_label.set_use_markup(True)
                name_label.set_xalign(0)
                name_label.set_hexpand(True)
                name_label.set_halign(Gtk.Align.FILL)

                vbox.prepend(name_label)
                description_label = Gtk.Label.new(package_description)
                description_label.set_xalign(0)
                description_label.set_hexpand(True)
                description_label.set_halign(Gtk.Align.FILL)
                vbox.prepend(description_label)

                vbox.set_hexpand(True)
                vbox.set_halign(Gtk.Align.FILL)
                vbox.set_margin_start(15)
                vbox.set_margin_end(15)
                vbox.set_margin_top(3)
                vbox.set_margin_bottom(3)
                hbox.prepend(vbox)

                remove_button = Gtk.Button.new_from_icon_name(
                    "window-close-symbolic")
                remove_button.set_has_frame(False)
                remove_button.set_tooltip_text(
                    # Translators: Don't translate {package}, it's a placeholder and will be replaced.
                    _("Stop installing {package} "
                      "automatically").format(package=package_name))

                # Set the accessibility name for the button to "Remove"
                Gtk.Accessible.update_property(
                    remove_button,
                    (Gtk.AccessibleProperty.LABEL,),
                    (_("Remove"),),
                )

                remove_button.connect(
                    "clicked", self.cb_listboxrow_remove_button_clicked,
                    package_name)
                hbox.append(remove_button)

                listboxrow.set_child(hbox)
                self.listbox.append(listboxrow)

            # Add empty listboxrow to finish the list with a separator
            listboxrow = Gtk.ListBoxRow.new()
            listboxrow.set_selectable(False)
            self.listbox.append(listboxrow)

            self.stack.set_visible_child(self.package_list_page)
            self.install_label.set_markup(
                _('To add more, install some software using '
                  '<a href="synaptic.desktop">Synaptic Package Manager</a> '
                  'or <a href="org.gnome.Terminal.desktop">APT on the '
                  'command line</a>.'))
        else:
            self.stack.set_visible_child(self.no_package_page)
            self.install_label.set_markup(
                _('To do so, install some software using '
                  '<a href="synaptic.desktop">Synaptic Package Manager</a> '
                  'or <a href="org.gnome.Terminal.desktop">APT on the '
                  'command line</a>.'))
            if has_unlocked_persistence():
                # The label from the UI file is good unmodified
                pass
            elif has_persistence():
                self.install_label.set_markup(
                    _('To do so, unlock your Persistent Storage '
                      'when starting Tails and '
                      'install some software using '
                      '<a href="synaptic.desktop">Synaptic Package '
                      'Manager</a> or '
                      '<a href="org.gnome.Terminal.desktop">APT on the '
                      'command line</a>.'))
            elif is_tails_media_writable():
                self.persistence_button.set_visible(True)
                self.install_label.set_markup(
                    _('To do so, create a Persistent Storage and install some '
                      'software using '
                      '<a href="synaptic.desktop">Synaptic Package '
                      'Manager</a> or '
                      '<a href="org.gnome.Terminal.desktop">APT on the '
                      'command line</a>.'))
                # Start a thread to update the app when the Persistent Storage
                # is ready.
                threading.Thread(target=self._wait_for_persistence_ready,
                                 daemon=True,
                                 ).start()

            else:   # It's impossible to have a persistent storage
                self.install_label.set_markup(
                    _('To do so, install Tails on a USB stick '
                      'and create a Persistent Storage.'))


class ASPConfigApplication(Gtk.Application):
    def __init__(self, *args, **kwargs):
        super().__init__(
            *args,
            application_id="org.boum.tails.AdditionalSoftware",
            **kwargs)

    def do_activate(self):
        self.window.present()

    def do_startup(self):
        Gtk.Application.do_startup(self)
        gettext.install("tails")
        self.window = Window(
            application=self,
            get_config_func=self.get_asp_configuration,
            remove_asp_func=self.remove_additional_software)

        packages_list_file = Gio.File.new_for_path(
            get_packages_list_path(return_nonexistent=True))
        self.packages_list_monitor = packages_list_file.monitor(
            Gio.FileMonitorFlags.NONE, None)
        self.packages_list_monitor.connect(
            "changed", self.cb_packages_list_changed)

    def cb_packages_list_changed(self, file_monitor, file, other_file,
                                 event_type):
        if os.access(file.get_path(), os.R_OK):
            self.window.update_packages_list()

    def get_asp_configuration(self):
        additional_packages = get_additional_packages()
        apt_cache = apt.cache.Cache()

        packages_with_description = []
        for package in sorted(additional_packages):
            package_name = filter_package_details(package)
            try:
                apt_package = apt_cache[package_name]
            except KeyError:
                summary = _("[package not available]")
            else:
                if apt_package.installed:
                    summary = apt_package.installed.summary
                else:
                    summary = apt_package.candidate.summary
            packages_with_description.append((package, summary))

        return packages_with_description

    def remove_additional_software(self, package_name):
        subprocess.run(["/usr/bin/pkexec",
                        "/usr/local/lib/additional-software/asp-remove-package",
                        package_name],
                       check=True)


asp_application = ASPConfigApplication()
exit_status = asp_application.run(sys.argv)
sys.exit(exit_status)
