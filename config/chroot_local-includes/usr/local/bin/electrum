#! /usr/bin/env python3
"""
Tails electrum wrapper

Test with "python3 electrum.py doctest".
The tests will start the tor-browser so you probably
want to use a tester that handles user interaction or
run the tests from the command line and answer prompts as needed.

goodcrypto.com converted from bash to python and added basic tests.

>>> # run script
>>> sh.Command(sys.argv[0])()
<BLANKLINE>
"""

import gettext
import os
import sys
import subprocess
import sh
import random
from pathlib import Path

translation = gettext.translation("tails", '/usr/share/locale', fallback=True)
_ = translation.gettext

HOME_DIR = os.environ['HOME']
CONF_DIR = Path(HOME_DIR, '.electrum')
DONATION_BITCOIN_ADDRESS = 'bitcoin:bc1qjg53lww9jrm506dj0g0szmk4pxt6f55x8dncuv?label=Donation to Tails'

TPS_FEATURE_NAME="Electrum"


def main(*args):
    # If we're called with arguments, don't show any messages or adjust
    # any config and just start Electrum, to avoid breaking scripts /
    # command-line usage.
    if len(args) > 0:
        exec_electrum(*args)

    if not electrum_config_is_persistent():
        if not verify_start():
            return

    # Disable update checking for all users (even those who made their config
    # persistent before we changed this value in the default config), because
    # users can't easily update to a new version anyway if it's not in Debian.
    subprocess.run(['/usr/bin/electrum', '--offline',
                    'setconfig', 'check_updates', 'false'],
                   check=True, stdout=subprocess.DEVNULL)

    if should_show_donation_message():
        show_donation_message()
    else:
        exec_electrum(*args)


def exec_electrum(*args):
    os.execv('/usr/bin/electrum', ['/usr/bin/electrum'] + list(args))


def should_show_donation_message() -> bool:
    # Don't show the message if electrum is not persistent
    if not electrum_config_is_persistent():
        return False

    # Only show the message if the user has a wallet
    if not any(Path(CONF_DIR, 'wallets').iterdir()):
        return False

    # Check the environment variable
    if os.environ.get('ELECTRUM_DONATION_MESSAGE') == '0':
        return False
    elif os.environ.get('ELECTRUM_DONATION_MESSAGE') == '1':
        return True

    # If the other conditions are met, show the message in 1/20 of the
    # cases.
    return random.randint(0, 19) == 0


def show_donation_message():
    if random.randint(0, 1) == 0:
        # In half of the cases, display a message with benevolent incentive
        text = _('Tails needs donations to keep everybody free and safe '
                 'online.\n\nEvery bit helps in our fight against surveillance '
                 'and censorship!\n\n'
                 '<a href="file:///usr/share/doc/tails/website/donate.en.html#expenses">How we spend our money.</a>'),

    else:
        # In the other half, display a message with a more selfish incentive
        text = _('Tails protects your wallet.\n\n'
                 'Help us keep your bitcoins safe!\n\n'
                 '<a href="file:///usr/share/doc/tails/website/donate.en.html#expenses">How we spend our money.</a>'),

    # results 0 == True; 1 == False; 5 == Timeout
    result = sh.zenity('--question',
                       '--title', '',
                       '--text', text,
                       '--ok-label', _('Donate Now'),
                       '--cancel-label', _('Later'),
                       '--icon-name', 'tails-logo-drawing',
                       '--ellipsize',
                       _ok_code=[0, 1, 5])
    if result.exit_code == 0:
        # Show a GNOME notification to let the user know that we're
        # opening Electrum with our donation address.
        sh.notify_send(
            _('Opening Electrum with our donation address...'),
            _('Thank you for making the Internet a safer place!'),
        )
        exec_electrum(DONATION_BITCOIN_ADDRESS)
    else:
        exec_electrum()


def electrum_config_is_persistent():
    """Return True iff electrum config is persistent.

    >>> electrum_config_is_persistent()
    False
    """

    try:
        subprocess.run(
            ["/usr/local/lib/tpscli", "is-active", TPS_FEATURE_NAME],
            check=True,
        )
        return True
    except subprocess.CalledProcessError as e:
        if e.returncode != 1:
            raise
        return False


def verify_start():
    """Ask user whether to start Electrum.

    >>> verify_start() in (True, False)
    True
    """

    disabled_text = _('Persistence is disabled for Electrum')
    warning_text = _(
        "When you reboot Tails, all of Electrum's data will be lost, including your Bitcoin wallet.\nIt is strongly recommended to only run Electrum when its persistence feature is activated.")
    question_text = _('Do you want to start Electrum anyway?')
    dialog_msg = ('<b><big>{}</big></b>\n\n{}\n\n{}\n'.
                  format(disabled_text, warning_text, question_text))
    launch_text = _('_Launch')
    exit_text = _('_Exit')

    # results 0 == True; 1 == False; 5 == Timeout
    results = sh.zenity('--question', '--title', '', '--default-cancel',
                        '--ellipsize',
                        '--ok-label', launch_text,
                        '--cancel-label', exit_text,
                        '--text', dialog_msg,
                        _ok_code=[0, 1, 5])
    start = results.exit_code == 0

    return start


if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'doctest':
        import doctest
        doctest.testmod()
    else:
        main(*sys.argv[1:])
