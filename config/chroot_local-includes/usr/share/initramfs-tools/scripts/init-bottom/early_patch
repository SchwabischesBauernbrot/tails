#!/bin/sh

# Enable xtrace with timestamp
export PS4='$(date "+%H:%M:%S.%3N") '
set -x

PREREQS=""

prereqs() { echo "$PREREQS"; }

case "$1" in
	prereqs)
	prereqs
	exit 0
	;;
esac

set -eu

option="$(tr ' ' '\n' < /proc/cmdline | grep '^early_patch\b')"

[ -n "$option" ] || exit 0

umount_option="$(echo "$option" | grep -w umount || true)"

. /scripts/functions

MOUNTPOINT=/root/mnt/tails.git

run() {
  for mod in fscache 9pnet 9pnet_virtio 9p; do
    modprobe -vvv -d /root/ $mod
  done

  mkdir -p "$MOUNTPOINT"
  mount -t 9p tails.git "$MOUNTPOINT"

  # Mount /proc and /dev into the chroot unless umount was requested.
  # This is needed for the bind mount hooks to work.
  if [ -z "${umount_option}" ]; then
    mount -t proc /proc /root/proc
    mount --bind /dev /root/dev
  fi

  # Avoid that git fails because of dubious ownership
  chroot /root git config --global --add safe.directory "${MOUNTPOINT#/root}"

  if [ -n "${umount_option}" ]; then
    HOOK_DIR="${MOUNTPOINT}/config/patch/hooks/umount"
  else
    HOOK_DIR="${MOUNTPOINT}/config/patch/hooks/default"
  fi
  HOOKS=$(ls -1 "${HOOK_DIR}"/* 2>/dev/null || true)

  for hook in $HOOKS; do
    # The #/root part makes the path relative to the chroot
    echo >&2 "Running hook: ${hook#/root}"
    chroot /root "${hook#/root}"
  done

  # Unmount the git repo if umount was requested. This is needed when
  # running the test suite, because the test suite uses qemu snapshots
  # and qemu cannot do snapshots while something is mounted from the
  # host.
  if [ -n "${umount_option}" ]; then
      umount "$MOUNTPOINT"
  fi
}

spawn_shell() {
  # Make plymouth write the log to /root/var/log/boot.log
  /bin/plymouth update-root-fs --new-root-dir=/root --read-write
  # Stop plymouth, so that the user can see the shell
  /bin/plymouth quit || true

  tail -n 20 /root/var/log/boot.log >&2

  # Disable xtrace to make the following output more readable
  set +x
  echo -e >&2 "\nThe early_patch hook failed. Spawning a shell to allow debugging..."
  echo >&2 "The log is in /root/var/log/boot.log"
  echo >&2 "Press Ctrl-D to continue booting."

  # Call panic from /usr/share/initramfs-tools/scripts/functions to
  # spawn a shell. Note that panic does not work if set -e is active.
  . /scripts/functions
  panic
}

# This is necessary to have `set -e` work in the `run` function, see
# https://stackoverflow.com/a/11092989
set +e
(set -e; run); ret=$?

if [ "$ret" -ne 0 ]; then
  spawn_shell
fi
