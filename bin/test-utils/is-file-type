#!/usr/bin/env python3

from argparse import ArgumentParser
from typing import Optional
from pathlib import Path
import os
import re
import sys


class Language:
    NAME = ""
    EXTENSIONS = ()
    SHEBANGS = ()

    def extract_shebang(self, file: Path) -> Optional[str]:
        with file.open("rb") as buf:
            start = buf.read(2)
            if start != b"#!":
                return None
            return buf.readline().strip().decode("ascii")

    def find_matching(self, needle, haystack) -> bool:
        for hay in haystack:
            if isinstance(hay, str):
                if hay == needle:
                    return True
            elif hay.match(needle) is not None:
                return True
        return False

    def check_extension(self, file: Path) -> bool:
        basename = file.name
        return any(basename.endswith(ext) for ext in self.EXTENSIONS)

    def check_shebang(self, file: Path) -> bool:
        if not self.SHEBANGS:
            return False
        if not os.access(str(file), os.X_OK):
            return False
        shebang = self.extract_shebang(file)
        if shebang is None:
            return False

        return self.find_matching(shebang, self.SHEBANGS)

    def check(self, file: Path) -> bool:
        if self.check_extension(file):
            return True
        if self.check_shebang(file):
            return True

        return False

    @classmethod
    def lookup_language(cls, language_name: str) -> "Language":
        for subcls in cls.__subclasses__():
            if language_name == subcls.NAME:
                return subcls
        raise UnsupportedLanguage

    @classmethod
    def list_languages(cls) -> list[str]:
        ret = []
        for subcls in cls.__subclasses__():
            ret.append(subcls.NAME)
        return ret


class UnsupportedLanguage(Exception):
    pass


class Python(Language):
    NAME = "python"
    EXTENSIONS = (".py",)
    SHEBANGS = (re.compile(r".*python3\b"),)


class Shell(Language):
    NAME = "shell"
    EXTENSIONS = (".sh",)
    SHEBANGS = (re.compile(r"/bin/(ba|)sh\b"), re.compile(r"/usr/bin/env bash\b"))


class Ruby(Language):
    NAME = "ruby"
    EXTENSIONS = (".rb",)
    SHEBANGS = (re.compile(r"/usr/bin/(env |)ruby\b"),)


def get_parser():
    def get_language(language_name: str):
        return Language.lookup_language(language_name)()

    p = ArgumentParser()
    p.set_defaults(func=main_help)

    sub = p.add_subparsers()

    supported_languages = ",".join(Language.list_languages())

    check = sub.add_parser("check")
    check.add_argument(
        "language", type=get_language, help=f"One of {supported_languages}"
    )
    check.add_argument("file", type=Path)
    check.set_defaults(func=main_check)

    _filter = sub.add_parser("filter", description="Only print matching lines")
    _filter.add_argument(
        "--zero",
        action="store_true",
        default=False,
        help="Use \\0 instead of newlines, both as input and output delimiter",
    )
    _filter.add_argument(
        "language", type=get_language, help=f"One of {supported_languages}"
    )
    _filter.add_argument(
        "files", type=Path, nargs="*", help="If no file is provided, read from stdin"
    )
    _filter.set_defaults(func=main_filter)

    return p


def main_help(args):
    print("Wrong usage, try --help", file=sys.stderr)
    sys.exit(1)


def main_check(args):
    if not args.language.check(args.file):
        sys.exit(1)
    sys.exit(0)


def split_read(handle, line_separator="\n", chunk_size=1024):
    # adapted from https://stackoverflow.com/a/45305837
    buf = ""  # storage buffer
    while not handle.closed:  # while our handle is open
        data = handle.read(chunk_size)
        if not data:
            break
        buf += data
        if line_separator in buf:
            chunks = buf.split(line_separator)
            buf = chunks.pop()  # keep the last entry in our buffer
            yield from chunks
    if buf:
        yield buf  # return the last buffer if any


def iterate_file_list(args, delimiter="\n"):
    if args.files:
        yield from args.files
    else:
        for file in split_read(sys.stdin, line_separator=delimiter):
            yield Path(file)


def main_filter(args):
    delimiter = "\0" if args.zero else "\n"
    for file in iterate_file_list(args, delimiter=delimiter):
        if not file.is_file():
            continue
        if args.language.check(file):
            print(file, end=delimiter)


def main():
    args = get_parser().parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
