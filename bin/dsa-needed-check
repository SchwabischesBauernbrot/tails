#!/usr/bin/python3

import argparse
import requests
import sys
import yaml

DEFAULT_BUILD_MANIFEST_URL_TEMPLATE = "https://nightly.tails.boum.org/build_Tails_ISO_{branch}/lastSuccessful/archive/latest.build-manifest"
DSA_NEEDED_URL = "https://salsa.debian.org/security-tracker-team/security-tracker/-/raw/master/data/dsa-needed.txt"


def fetch_url_content(url):
    return requests.get(url).content.decode("utf-8")


def package_list_from_build_manifest(manifest):
    return [e["package"] for e in yaml.safe_load(manifest)["packages"]["binary"]]


def dsa_needed_packages():
    """
    Returns a dictionary mapping package names to their entry in
    dsa-needed.txt
    """
    packages = {}
    next_line_is_package = False
    next_line_is_maybe_description = False
    current_package_name = None
    for line in fetch_url_content(DSA_NEEDED_URL).splitlines():
        if line == "--":
            # Each entry is delimited by lines consisting of --
            next_line_is_package = True
            next_line_is_maybe_description = False
        elif next_line_is_package:
            # Each entry starts with the package name and there are
            # two optional parts: package_name[/suite][ (maintainer)]
            current_package_name = line.split()[0].split("/")[0]
            packages[current_package_name] = line
            next_line_is_package = False
            next_line_is_maybe_description = True
        elif next_line_is_maybe_description:
            # After the package name line each entry may list some
            # description of what's going on, if the maintainer has
            # been notified or have plans, etc.
            packages[current_package_name] += "\n" + line
    return packages


def main():
    """
    Prints an excerpt of dsa-needed.txt with only the entries for
    packages also in the Tails image .build-manifest
    """
    parser = argparse.ArgumentParser(description="list all packages that ")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--branch",
                       help="The Git branch to fetch the .build-manifest for",
                       default="stable")
    group.add_argument("--build-manifest",
                       type=argparse.FileType("r"),
                       help="A local .build-manifest")
    args = parser.parse_args()

    manifest = args.build_manifest
    if not manifest:
        print(
            "Fetching .build-manifest from jenkins' most recent build of "
            f"the {args.branch} branch...",
            file=sys.stderr,
        )
        url = DEFAULT_BUILD_MANIFEST_URL_TEMPLATE.format(branch=args.branch)
        manifest = fetch_url_content(url)

    tails_packages = package_list_from_build_manifest(manifest)
    dsa_needed = dsa_needed_packages()
    for package in tails_packages:
        if package in dsa_needed:
            print("--")
            print(dsa_needed[package])


if __name__ == "__main__":
    main()
