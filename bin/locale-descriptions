#!/usr/bin/python3

import sys
from pathlib import Path
import re
from collections import defaultdict
from argparse import ArgumentParser

import toml
import requests

try:
    from BeautifulSoup import BeautifulSoup
except ImportError:
    from bs4 import BeautifulSoup

ERRORS = 0
LANGUAGE_RE = re.compile(r'^"Language:\s+(.*)\\n"$')
MAPFILE = "po/po-to-mozilla.toml"


def get_language(pofile: Path) -> str:
    for line in pofile.open():
        match = LANGUAGE_RE.match(line)
        if match is not None:
            return match.group(1)
    raise ValueError(f"Could not extract language from file {pofile}")


class ValidLocales:
    def __init__(self):
        self.locales = self.parse_table(
            requests.get("https://lh.2xlibre.net/locales/").text
        )
        self.languages = defaultdict(list)
        for locale in self.locales:
            self.languages[locale.split("_")[0]].append(locale)

    def parse_table(self, body):
        dom = BeautifulSoup(body, features="lxml")
        ret = {}
        for row in dom.find_all("tr"):
            locale = row.select("td:first-child > a")[0].string
            language = row.select("td:nth-child(2)")[0].string.strip("â€” ")
            country = row.select("td:nth-child(3)")[0].string or ""
            ret[locale] = (language, country.title())
        return ret


class LocaleDescriptions:
    def __init__(self):
        self.n_errors = 0
        self.languages_not_found = set()
        self.po_to_mozilla = toml.load(open(MAPFILE))

    def get_all_mozlocales(self):
        yield from self.po_to_mozilla.get("extra", {}).get("extra_languages", [])
        for po in sorted(Path("po/").glob("*.po")):
            moz_locale = get_language(po)

            if "_" in moz_locale:
                lang, sub = moz_locale.split("_", maxsplit=1)
                yield f"{lang}-{sub}:{sub}"
            elif moz_locale in self.po_to_mozilla["map"]:
                value = self.po_to_mozilla["map"][moz_locale]
                if type(value) is str:
                    yield value
                else:
                    yield from value
            else:
                print(
                    f"Could not find {moz_locale} (from {po}), "
                    f"please add it to {MAPFILE}",
                    file=sys.stderr,
                )
                self.n_errors += 1
                self.languages_not_found.add(moz_locale)

    def get_suggestions(self):
        if not self.languages_not_found:
            return
        valid_locales = ValidLocales()
        suggested_add = ""
        for lang in sorted(self.languages_not_found):
            locales = valid_locales.languages[lang]
            if len(locales) == 1:
                details = ", ".join(valid_locales.locales[locales[0]])
                suggested_add += f'{lang}="{locales[0]}"   # {details}\n'
        return suggested_add


def get_parser():
    p = ArgumentParser()
    p.set_defaults(mode='')
    sub = p.add_subparsers()
    generate = sub.add_parser('generate')
    generate.set_defaults(mode='generate')
    suggest = sub.add_parser('suggest')
    suggest.set_defaults(mode='suggest')

    return p


def main():
    parser = get_parser()
    args = parser.parse_args()
    helper = LocaleDescriptions()

    if args.mode == '':
        print(parser.error("You need to specify a subcommand"))

    mozlocales = list(sorted(helper.get_all_mozlocales()))
    if args.mode == 'generate':
        for out in mozlocales:
            print(out)
        sys.exit(0)

    elif args.mode == 'suggest':
        if helper.n_errors:
            suggestion = helper.get_suggestions()
            if suggestion:
                print(
                    "You might want to add this block, but please verify it first!",
                    file=sys.stderr,
                )
                print(suggestion, file=sys.stderr)
        sys.exit(0)


if __name__ == "__main__":
    main()
